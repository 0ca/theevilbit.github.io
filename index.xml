<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>theevilbit blog</title>
    <link>https://theevilbit.github.io/</link>
    <description>Recent content on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started in macOS security</title>
      <link>https://theevilbit.github.io/posts/getting_started_in_macos_security/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/getting_started_in_macos_security/</guid>
      <description>Many people used to ask me where to start learning about macOS security or exploitation, what are the trainings or books out there that can help with this topic. Surprisingly there is great coverage for macOS internals and defense, which are even recent vs exploitation, where everything is 9+ years old. If you are interested in offensive macOS research, you are stuck with blog posts and conference talks.
I thought I will try to collect some resources that can help people to get started in this field.</description>
    </item>
    
    <item>
      <title>Let&#39;s talk macOS Authorization</title>
      <link>https://theevilbit.github.io/posts/macos_authorization/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_authorization/</guid>
      <description>This is a blog post I wanted to write for a while now, but somehow never got the time for it, and I also knew that it will require lots of time, so I kept delaying it. I finally kicked my ass, sat down, and wrote it.
The goal of the post is to cover many aspects of authorization, which I found interesting from security perspective. Honestly, partially for selfish reasons so I will have a goto summary when I need to lookup something later instead of browsing through 8-10 different articles.</description>
    </item>
    
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>TL;DR We could mount the entire file system through APFS snapshots as read-only, with the noowners flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! 😱
This could be achieved with a single command, for example: mount_apfs -o noowners -s http://com.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 5 - PID reuse attacks (CVE-2020-14977)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</guid>
      <description>In the last post of the series we will see another typical issue, where XPC services using the connecting process&amp;rsquo;s ID (PID) to verify the client instead of the audit token. We will use F-Secure SAFE again for our case study, the vulnerability was fixed in 17.8 and it was assigned CVE-2020-14977.
The root cause The XPC services of F-Secure SAFE use the process ID (PID) to verify the client&amp;rsquo;s signature, as can be seen in the code below.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 4 - Improved client authorization (CVE-2020-14978)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</guid>
      <description>F-Secure SAFE XPC service exploitation (CVE-2020-14978) Intro In this post we will look into an other case study which will show us (again) why XPC client verification is crucial in XPC security, and how added authorization checks can slightly improve (but not fix) the problem. The F-Secure SAFE XPC services installed on macOS were not sufficiently hardened, and a malicious actor had the ability to interact with them. The vulnerability was fixed in version 17.</description>
    </item>
    
    <item>
      <title>The AMFI MACF policy system call</title>
      <link>https://theevilbit.github.io/posts/amfi_syscall/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/amfi_syscall/</guid>
      <description>On macOS, one popular technique to inject code into other applications is leveraging the DYLD_INSERT_LIBRARIES environment variable, which I wrote about in 2019 DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX. This variable can store a colon-separated list of dynamic libraries to load before the ones specified in the target process.
Several limitations apply to when this injection technique can be used and when it cannot, which I also discussed. I revisited this topic, not only because things might have changed since then but also to ensure that I didn’t miss anything.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 3 - Incorrect client verification (CVE-2020-0984)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</guid>
      <description>Microsoft AutoUpdate macOS privilege escalation vulnerability (CVE-2020-0984) Introduction This is the third post in my series which is trying to help Apple developers to avoid typical insecure coding practices. This one will highlight why XPC client hardening and proper verification is extremely important when we use XPC messaging on macOS between clients that run as a normal user and services that run as root. If this validation is not right, it opens up the possibility for an attacker to run privileged commands or worse case, achieve full privilege escalation on the system.</description>
    </item>
    
    <item>
      <title>Kernel Debugging macOS with SIP</title>
      <link>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</guid>
      <description>As security researchers, we often find ourselves needing to look deep into various kernels to fully understand our target and accomplish our goals. Doing so on the Windows platform is no mystery, as there have been countless well-written posts about kernel debugging setups. For macOS, however, the situation is slightly different.
There are many great posts describing how to set up kernel debugging between two machines, but all of them suggest that SIP (System Integrity Protection) should be disabled for kernel debugging.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 2 - Checking CS (CodeSigning) flags of the client</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part2/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part2/</guid>
      <description>I&amp;rsquo;m still waiting for some bug fixes to release the previously planned posts, and in the meantime I continue to poke at other PrivilegedHelperTools. This post born because I actually failed to exploit an XPC service, and I learned something new in regards, of how to securely write such a service. One application that came to my sight is Viscosity. This tool was already in Tyler Bohan&amp;rsquo;s list, where his team looked on exploiting such services: GitHub - blankwall/Offensive-Con: Talk and materials for Offensive Con presentation - Privileged Helper Tools.</description>
    </item>
    
    <item>
      <title>Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers.</description>
    </item>
    
    <item>
      <title>Secure coding XPC services - Part 1 - Why EvenBetterAuthorization is not enough? (CVE-2019-20057)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part1/</guid>
      <description>This is the first part of a blog post series I plan about PrivilegedHelperTools that exists on macOS systems. I recently took a look on a couple of these tools, and found that it&amp;rsquo;s very easy to make the code insecure, as there are many small pieces to it, and if one is done wrong, the helper tool will be open to abuse by anyone having a foothold on the system.</description>
    </item>
    
    <item>
      <title>macOS persistence - Spotlight importers and how to create them</title>
      <link>https://theevilbit.github.io/posts/macos_persistence_spotlight_importers/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_persistence_spotlight_importers/</guid>
      <description>TL;DR It works, but very limited due to heavy sandboxing, you can only read and copy files to your sandbox folder or consume some CPU power. If you have a way to escape sandbox then go for it, or could be used as part of a multi-part malware.
Intro I’m reading Jonathan Levin’s *OS Internals Vol I. book (user mode - *OS Internals: - Welcome!), and I got to the chapter where he talks about Spotlight importers, and my first thought was that it would be an awesome way to persist on macOS.</description>
    </item>
    
    <item>
      <title>GateKeeper - Bypass or not bypass?</title>
      <link>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/gatekeeper_bypass_or_not_bypass/</guid>
      <description>TL;DR On macOS Mojave Gatekeeper only verifies executables, which are run with the open command or the user double clicks. It won’t verify files, that are executed through other means like, directly executing a binary ./myapp regardless of the quarantine attribute. If you can place a plist file inside LaunchAgents/LaunchDaemons, the command inside will also be executed. Prior to Catalina there is a way to trick users to drag &amp;amp; drop files in the LaunchAgents folder.</description>
    </item>
    
    <item>
      <title>IOBit Unlocker 1.1.2 - Local Privilege Escalation (CVE-2020-14974 &amp; CVE-2020-14975)</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>IOBit’s Unlocker program is advertised to solve the following issues:
 IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.
 and even:
 With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.</description>
    </item>
    
    <item>
      <title>Few click RCE via GitHub Desktop macOS client with Gatekeeper bypass and custom URL handlers</title>
      <link>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/few_click_rce_via_github_desktop_macos_client_with_gatekeeper_bypass_and_custom_url_handlers/</guid>
      <description>TL;DR The GitHub Desktop app doesn’t add the quarantine extended attribute to files downloaded from the web, and this along with macOS’s URL handler auto-registration feature allows an attacker to execute arbitrary, even unsigned code on a macOS system. If we don’t count the clicks required to open the GitHub App, and cloning an external repository, then this is a 2 click RCE.
The idea I recently came across a very good blog post about an RCE vulnerability on GitHub Desktop: GitHub Desktop RCE (OSX) - André Baptista via its custom URL handlers.</description>
    </item>
    
    <item>
      <title>Shield - An app to protect against process injection on macOS</title>
      <link>https://theevilbit.github.io/shield/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/shield/</guid>
      <description>TL;DR I made an app based on Apple&amp;rsquo;s Endpoint Security framework, that can protect against some of the process injection techniques on macOS. I still didn&amp;rsquo;t receive my production endpoint security entitlement, so I can&amp;rsquo;t release a signed version. If you want to use it, you need to get a development endpoint security entitlement at minimum.
The motivation In the past 2 years I started to dig into macOS security research, and along the way it became pretty clear that beyond memory corruption issues the alpha and omega of macOS exploits is to run code in the context of other applications.</description>
    </item>
    
    <item>
      <title>UninstallString - a possible LPE via Social Engineering</title>
      <link>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/uninstallstring_a_possible_lpe_via_social_engineering/</guid>
      <description>Whenever you install an application on Windows, typically through MSI, there is a registry key created, with plenty of information for uninstallation, like the uninstaller location, install date, publisher, etc… you can find all of the options here: Add uninstall information to Add/Remove Programs - NSIS
In case an application is installed for the current user and not for all user, the Installation/Uninstallation details will go to the Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\ registry key instead of the HKLM hive.</description>
    </item>
    
    <item>
      <title>A simple protection against HMValidateHandle technique</title>
      <link>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/</guid>
      <description>In the recent days I was reading technical analysis of win32k exploits from recent years, and it caught my eyes, that the HMValidateHandle technique is very heavily used almost everywhere. Then I had an idea how to protect against this family of exploits, which I think is very simple. This post will be about that.
What is HMValidateHandle? HMValidateHandle is an internal, unexported function of user32.dll. It takes a handle and a handle type as arguments, and by looking up the handle table, if the handle is matching with the type it will copy the object to user memory.</description>
    </item>
    
    <item>
      <title>DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX</title>
      <link>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</guid>
      <description>After my recent blog post, my old mate @_Dark_Knight_ reached out to me and he asked me a question:
 “Do you typically callout user apps that allow dyld_insert_libraries?”
 And a few similar ones, and I will be honest, I had no idea what is he talking about, if only I understood the question :D Despite the fact that my recent blog posts and talks are about macOS, I deal much more with Windows on a daily basis, probably like 95%, and macOS is still a whole new territory for me.</description>
    </item>
    
    <item>
      <title>macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.</description>
    </item>
    
    <item>
      <title>GNS3 ubridge SETUID bit - arbitrary file read (CVE-2020-14976)</title>
      <link>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</guid>
      <description>A couple of weeks ago, I had the idea of scanning my Mac for files that has the SUID bit set, I wanted to see if there is anything interesting showing up. You can do it this way:
/usr/bin/sudo find / -perm -4000 -exec /bin/ls -ldb {} \; &amp;gt; suidfilelist There was one item that caught my attention, and that was a file called ubridge inside GNS3. I used to be a network guy, and GNS3 is a great tool to emulate real network gear, practice configuration, etc.</description>
    </item>
    
    <item>
      <title>macOS - Persisting through Application script files</title>
      <link>https://theevilbit.github.io/posts/macos_persisting_through-application_script_files/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_persisting_through-application_script_files/</guid>
      <description>I started to explore to possibility of persisting on macOS through script files contained in an application. The basic idea is that if we find a script file, which is being executed by a given application, we can edit that script file, put our code inside, and wait for an execution. Such technique is highly dependent on the applications the user has installed, so I looked through first how rare / frequent is having such scripts inside applications.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://theevilbit.github.io/about/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/about/</guid>
      <description>My name is Csaba Fitzl or also known as &amp;ldquo;theevilbit&amp;rdquo;, which comes from RFC 3514. I currently work as a red teamer at a Big Oil company, but I also worked 5 years as blue teamer, and also spent 6 years building network infrastructure, and mostly having fun with BGP.
  This is the new place for my blog, the old one is here: https://theevilbit.blogspot.com/
  Other places where you can find me:</description>
    </item>
    
    <item>
      <title>VMware Fusion 11 - Guest VM RCE - CVE-2019-5514</title>
      <link>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</guid>
      <description>TL;DR You can run an arbitrary command on a VMware Fusion guest VM through a website without any priory knowledge. Basically VMware Fusion is starting up a websocket listening only on the localhost. You can fully control all the VMs (also create/delete snapshots, whatever you want) through this websocket interface, including launching apps. You need to have VMware Tools installed on the guest for launching apps, but honestly who doesn’t have it installed.</description>
    </item>
    
  </channel>
</rss>
