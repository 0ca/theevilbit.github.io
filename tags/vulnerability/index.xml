<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vulnerability on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/vulnerability/</link>
    <description>Recent content in vulnerability on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/tags/vulnerability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reversing engineering the fix of CVE-2020-9771</title>
      <link>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/reversing_cve_2020_9771/</guid>
      <description>When I originally found the mount_apfs bug back in December, 2019 I honestly had no idea what was the root cause for, nor had a clue how to even start looking into it. The only thing I knew for sure that the answer is within kernel. My macOS knowledge was still quite fresh that time (and even today), and was busy with so many other stuff that I never had the time to start looking into it.</description>
    </item>
    
    <item>
      <title>Microsoft Teams for macOS Local Privilege Escalation</title>
      <link>https://theevilbit.github.io/posts/microsoft_teams_lpe/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/microsoft_teams_lpe/</guid>
      <description>This blog post shares the details of a vulnerability Offensive Security discovered in the XPC service of Microsoft Teams. Although Microsoft secured these services reasonably well, we will see how small code mistakes can have serious impacts.
We reported the issue to MSRC, but unfortunately Microsoft decided that ‚Äúthe finding is valid but does not meet our bar for immediate servicing.‚Äù While they have since hardened the XPC service, it remains exploitable.</description>
    </item>
    
    <item>
      <title>CVE-2020-9771 - mount_apfs TCC bypass and privilege escalation</title>
      <link>https://theevilbit.github.io/posts/cve_2020_9771/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/cve_2020_9771/</guid>
      <description>TL;DR We could mount the entire file system through APFS snapshots as read-only, with the noowners flag, which enables us accessing (almost) every file in the file system, including data (documents, files, etc&amp;hellip;) of every user on the system, including those protected by Apple&amp;rsquo;s privacy framework (TCC). Even with the Guest account we could read files of admin accounts as Guest! üò±
This could be achieved with a single command, for example: mount_apfs -o noowners -s http://com.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 5 - PID reuse attacks (CVE-2020-14977)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part5/</guid>
      <description>In the last post of the series we will see another typical issue, where XPC services using the connecting process&amp;rsquo;s ID (PID) to verify the client instead of the audit token. We will use F-Secure SAFE again for our case study, the vulnerability was fixed in 17.8 and it was assigned CVE-2020-14977.
The root cause The XPC services of F-Secure SAFE use the process ID (PID) to verify the client&amp;rsquo;s signature, as can be seen in the code below.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 4 - Improved client authorization (CVE-2020-14978)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part4/</guid>
      <description>F-Secure SAFE XPC service exploitation (CVE-2020-14978) Intro In this post we will look into an other case study which will show us (again) why XPC client verification is crucial in XPC security, and how added authorization checks can slightly improve (but not fix) the problem. The F-Secure SAFE XPC services installed on macOS were not sufficiently hardened, and a malicious actor had the ability to interact with them. The vulnerability was fixed in version 17.</description>
    </item>
    
    <item>
      <title>Secure coding XPC Services - Part 3 - Incorrect client verification (CVE-2020-0984)</title>
      <link>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_xpc_part3/</guid>
      <description>Microsoft AutoUpdate macOS privilege escalation vulnerability (CVE-2020-0984) Introduction This is the third post in my series which is trying to help Apple developers to avoid typical insecure coding practices. This one will highlight why XPC client hardening and proper verification is extremely important when we use XPC messaging on macOS between clients that run as a normal user and services that run as root. If this validation is not right, it opens up the possibility for an attacker to run privileged commands or worse case, achieve full privilege escalation on the system.</description>
    </item>
    
    <item>
      <title>Exploiting directory permissions on macOS</title>
      <link>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/exploiting_directory_permissions_on_macos/</guid>
      <description>This research started around summer time in 2019, when everything settled down after my talk in 2019, where I detailed how did I gained root privileges via a benign App Store application, that I developed. That exploit used a symlink to achieve this, so I though I will make a more general approach and see if this type of vulnerability exists in other places as well on macOS systems. As it turns out it does exists, and not just on macOS directly but also on other apps, it appears to be a very fruitful of issue, without too much effort I found 5 exploitable bugs on macOS, 3 in Adobe installers.</description>
    </item>
    
    <item>
      <title>IOBit Unlocker 1.1.2 - Local Privilege Escalation (CVE-2020-14974 &amp; CVE-2020-14975)</title>
      <link>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/iobit_unlocker_lpe/</guid>
      <description>IOBit‚Äôs Unlocker program is advertised to solve the following issues:
 IObit Unlocker performs well in solving ‚Äúcannot delete files‚Äù, ‚Äúaccess is denied‚Äù, ‚ÄúThe file is in use by another program or user‚Äù, or ‚ÄúThere has been a sharing violation‚Äù problems. With IObit Unlocker, you can manage all your files the way you want.
 and even:
 With ‚ÄúUnlock &amp;amp; Delete‚Äù, ‚ÄúUnlock &amp;amp; Rename‚Äù, ‚ÄúUnlock &amp;amp; Move‚Äù, and ‚ÄúUnlock &amp;amp; Copy‚Äù, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.</description>
    </item>
    
    <item>
      <title>macOS - Getting root with benign AppStore apps</title>
      <link>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ‚Äôresearch‚Äô I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don‚Äôt talk about usually, but I feel it‚Äôs part of the process all of us go through, when we try to create something.</description>
    </item>
    
    <item>
      <title>GNS3 ubridge SETUID bit - arbitrary file read (CVE-2020-14976)</title>
      <link>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/gns3_ubridge_setuid_bit_arbitrary_file_read/</guid>
      <description>A couple of weeks ago, I had the idea of scanning my Mac for files that has the SUID bit set, I wanted to see if there is anything interesting showing up. You can do it this way:
/usr/bin/sudo find / -perm -4000 -exec /bin/ls -ldb {} \; &amp;gt; suidfilelist There was one item that caught my attention, and that was a file called ubridge inside GNS3. I used to be a network guy, and GNS3 is a great tool to emulate real network gear, practice configuration, etc.</description>
    </item>
    
    <item>
      <title>VMware Fusion 11 - Guest VM RCE - CVE-2019-5514</title>
      <link>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/vmware_fusion_11_guest_vm_rce_cve-2019-5514/</guid>
      <description>TL;DR You can run an arbitrary command on a VMware Fusion guest VM through a website without any priory knowledge. Basically VMware Fusion is starting up a websocket listening only on the localhost. You can fully control all the VMs (also create/delete snapshots, whatever you want) through this websocket interface, including launching apps. You need to have VMware Tools installed on the guest for launching apps, but honestly who doesn‚Äôt have it installed.</description>
    </item>
    
  </channel>
</rss>
