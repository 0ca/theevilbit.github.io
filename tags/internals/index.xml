<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>internals on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/internals/</link>
    <description>Recent content in internals on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 19 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/tags/internals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About com.apple.private.security.clear-library-validation</title>
      <link>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/com.apple.private.security.clear-library-validation/</guid>
      <description>TL;DR On macOS 10.15.2 Apple introduced the com.apple.private.security.clear-library-validation entitlement, which is slowly replacing the previously used com.apple.security.cs.disable-library-validation entitlement on system binaries. Although their impact is the about the same, the way they work is different. While library validation is automatically disabled using com.apple.security.cs.disable-library-validation, with com.apple.private.security.clear-library-validation, the application has to disable it for itself through a csops system call.
Intro With the release of Big Sur, I noticed that many of the system binaries have a new entitlement, which I didn&amp;rsquo;t see before, and that is com.</description>
    </item>
    
    <item>
      <title>Let&#39;s talk macOS Authorization</title>
      <link>https://theevilbit.github.io/posts/macos_authorization/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_authorization/</guid>
      <description>This is a blog post I wanted to write for a while now, but somehow never got the time for it, and I also knew that it will require lots of time, so I kept delaying it. I finally kicked my ass, sat down, and wrote it.
The goal of the post is to cover many aspects of authorization, which I found interesting from security perspective. Honestly, partially for selfish reasons so I will have a goto summary when I need to lookup something later instead of browsing through 8-10 different articles.</description>
    </item>
    
    <item>
      <title>The AMFI MACF policy system call</title>
      <link>https://theevilbit.github.io/posts/amfi_syscall/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/amfi_syscall/</guid>
      <description>On macOS, one popular technique to inject code into other applications is leveraging the DYLD_INSERT_LIBRARIES environment variable, which I wrote about in 2019 DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX. This variable can store a colon-separated list of dynamic libraries to load before the ones specified in the target process.
Several limitations apply to when this injection technique can be used and when it cannot, which I also discussed. I revisited this topic, not only because things might have changed since then but also to ensure that I didnâ€™t miss anything.</description>
    </item>
    
    <item>
      <title>Kernel Debugging macOS with SIP</title>
      <link>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/kernel_debugging_with_sip/</guid>
      <description>As security researchers, we often find ourselves needing to look deep into various kernels to fully understand our target and accomplish our goals. Doing so on the Windows platform is no mystery, as there have been countless well-written posts about kernel debugging setups. For macOS, however, the situation is slightly different.
There are many great posts describing how to set up kernel debugging between two machines, but all of them suggest that SIP (System Integrity Protection) should be disabled for kernel debugging.</description>
    </item>
    
  </channel>
</rss>
