<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xpc on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/xpc/</link>
    <description>Recent content in xpc on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://theevilbit.github.io/tags/xpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Secure coding PrivilegedHelperTools - Part 2 - Checking CS (CodeSigning) flags of the client</title>
      <link>https://theevilbit.github.io/posts/secure_coding_privilegedhelpertools_part2/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_privilegedhelpertools_part2/</guid>
      <description>I&amp;rsquo;m still waiting for some bug fixes to release the previously planned posts, and in the meantime I continue to poke at other PrivilegedHelperTools. This post born because I actually failed to exploit an XPC service, and I learned something new in regards, of how to securely write such a service. One application that came to my sight is Viscosity. This tool was already in Tyler Bohan&amp;rsquo;s list, where his team looked on exploiting such services: GitHub - blankwall/Offensive-Con: Talk and materials for Offensive Con presentation - Privileged Helper Tools.</description>
    </item>
    
    <item>
      <title>Secure coding PrivilegedHelperTools - Part 1 - Why EvenBetterAuthorization is not enough?</title>
      <link>https://theevilbit.github.io/posts/secure_coding_privilegedhelpertools_part1/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/secure_coding_privilegedhelpertools_part1/</guid>
      <description>This is the first part of a blog post series I plan about PrivilegedHelperTools that exists on macOS systems. I recently took a look on a couple of these tools, and found that it&amp;rsquo;s very easy to make the code insecure, as there are many small pieces to it, and if one is done wrong, the helper tool will be open to abuse by anyone having a foothold on the system.</description>
    </item>
    
  </channel>
</rss>