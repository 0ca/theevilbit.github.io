<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>persistence on theevilbit blog</title>
    <link>https://theevilbit.github.io/tags/persistence/</link>
    <description>Recent content in persistence on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/tags/persistence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 4 - cron jobs</title>
      <link>https://theevilbit.github.io/beyond/beyond_0004/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0004/</guid>
      <description>cron is probably one of the most well known persistence mechanisms for macOS and basically any *nix operating system. It was originally developed for Unix back in 1975, and made its way to most platforms, which has Unix origins, like Linux, FreeBSD and thus macOS.
We can use the crontab utility to manage our cron jobs. The -l option will list our currently scheduled jobs.
csaby@mac ~ % crontab -l * * * * * /bin/bash -c &amp;quot;touch /tmp/cron2&amp;quot; The output above show that we have a bash script to run every minute.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 3 - Login Items</title>
      <link>https://theevilbit.github.io/beyond/beyond_0003/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0003/</guid>
      <description>To clear up some expectations. The below tweet is not about this method, that is deferred for now. :)
Login items are probably one of the most well documented methods to persist on macOS. It&amp;rsquo;s widely used by various application to launch themselves upon user login. These applications show up in the menubar most of the time.
There are two ways of setting up Login Items.
Launch Services Framework The first method is using the Launch Services Framework, to which the API reference can be found here.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 2 - iTerm2 startup command</title>
      <link>https://theevilbit.github.io/beyond/beyond_0002/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0002/</guid>
      <description>If the first part was about Terminal and shell profiles, it&amp;rsquo;s worth to mention iTerm2, which is a popular Terminal alternative on macOS. It&amp;rsquo;s being used by many people, especially power users.
When we start iTerm2 it starts the same shell environment as Terminal, and thus the same startup files apply here as well. However this application has an additional way to execute code.
In the Profile settings, there is an option, which is Send text at start.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 1 - shell startup files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0001/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0001/</guid>
      <description>Shell startup files are executed when our shell environment like zsh or bash is starting up. macOS defaults to /bin/zsh these days, and whenever we open Terminal or SSH into the device, this is the shell environment we are placed into. bash and sh are still available, however they have to be specifically started.
When we start zsh it checks number of files, and if there is an environment variable or command inside, it will be set or executed.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - Introduction</title>
      <link>https://theevilbit.github.io/beyond/beyond_intro/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_intro/</guid>
      <description>I was always amazed by @Hexacorn&amp;rsquo;s Beyond good ol&#39; Run key blog post series, which collects various persistence methods on Windows. It&amp;rsquo;s an awesome series, which has 133 parts at the time of this writing. I find them pretty cool, and if you are doing either offensive or defensive work on Windows, this is a must read and follow blog.
In the past years as my interest in macOS grew, and now that I&amp;rsquo;m mostly doing only macOS related research and studies I started to came across many - many tricks, which allows someone to do persistence on macOS beyond just the LaunchDaemons or LaunchAgents directories, which is used to store the launchd startup files.</description>
    </item>
    
    <item>
      <title>macOS persistence - Spotlight importers and how to create them</title>
      <link>https://theevilbit.github.io/posts/macos_persistence_spotlight_importers/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_persistence_spotlight_importers/</guid>
      <description>TL;DR It works, but very limited due to heavy sandboxing, you can only read and copy files to your sandbox folder or consume some CPU power. If you have a way to escape sandbox then go for it, or could be used as part of a multi-part malware.
Intro I’m reading Jonathan Levin’s *OS Internals Vol I. book (user mode - *OS Internals: - Welcome!), and I got to the chapter where he talks about Spotlight importers, and my first thought was that it would be an awesome way to persist on macOS.</description>
    </item>
    
    <item>
      <title>macOS - Persisting through Application script files</title>
      <link>https://theevilbit.github.io/posts/macos_persisting_through-application_script_files/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/posts/macos_persisting_through-application_script_files/</guid>
      <description>I started to explore to possibility of persisting on macOS through script files contained in an application. The basic idea is that if we find a script file, which is being executed by a given application, we can edit that script file, put our code inside, and wait for an execution. Such technique is highly dependent on the applications the user has installed, so I looked through first how rare / frequent is having such scripts inside applications.</description>
    </item>
    
  </channel>
</rss>
