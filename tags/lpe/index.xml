<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lpe on theevilbit blog</title>
    <link>/tags/lpe/</link>
    <description>Recent content in lpe on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/lpe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IOBit Unlocker 1.1.2 - Local Privilege Escalation</title>
      <link>/posts/iobit_unlocker_lpe/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/iobit_unlocker_lpe/</guid>
      <description>IOBit’s Unlocker program is advertised to solve the following issues:
 IObit Unlocker performs well in solving “cannot delete files”, “access is denied”, “The file is in use by another program or user”, or “There has been a sharing violation” problems. With IObit Unlocker, you can manage all your files the way you want.
 and even:
 With “Unlock &amp;amp; Delete”, “Unlock &amp;amp; Rename”, “Unlock &amp;amp; Move”, and “Unlock &amp;amp; Copy”, IObit Unlocker offers easier ways to unlock and manage the files and folders to keep them safe and available.</description>
    </item>
    
    <item>
      <title>UninstallString - a possible LPE via Social Engineering</title>
      <link>/posts/uninstallstring_a_possible_lpe_via_social_engineering/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/uninstallstring_a_possible_lpe_via_social_engineering/</guid>
      <description>Whenever you install an application on Windows, typically through MSI, there is a registry key created, with plenty of information for uninstallation, like the uninstaller location, install date, publisher, etc… you can find all of the options here: Add uninstall information to Add/Remove Programs - NSIS
In case an application is installed for the current user and not for all user, the Installation/Uninstallation details will go to the Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\ registry key instead of the HKLM hive.</description>
    </item>
    
    <item>
      <title>DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX</title>
      <link>/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/</guid>
      <description>After my recent blog post, my old mate @_Dark_Knight_ reached out to me and he asked me a question:
 “Do you typically callout user apps that allow dyld_insert_libraries?”
 And a few similar ones, and I will be honest, I had no idea what is he talking about, if only I understood the question :D Despite the fact that my recent blog posts and talks are about macOS, I deal much more with Windows on a daily basis, probably like 95%, and macOS is still a whole new territory for me.</description>
    </item>
    
    <item>
      <title>macOS - Getting root with benign AppStore apps</title>
      <link>/posts/getting_root_with_benign_appstore_apps/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/getting_root_with_benign_appstore_apps/</guid>
      <description>This writeup is intended to be a bit of storytelling. I would like to show how I went down the rabbit hole in a quick ’research’ I wanted to do, and eventually found a local privilege escalation vulnerability in macOS. I also want to show, tell about all the obstacles and failures I run into, stuff that people don’t talk about usually, but I feel it’s part of the process all of us go through, when we try to create something.</description>
    </item>
    
  </channel>
</rss>