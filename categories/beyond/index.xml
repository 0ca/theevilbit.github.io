<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beyond on theevilbit blog</title>
    <link>https://theevilbit.github.io/categories/beyond/</link>
    <description>Recent content in beyond on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/categories/beyond/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 17 - Color Pickers</title>
      <link>https://theevilbit.github.io/beyond/beyond_0017/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0017/</guid>
      <description>This is part 17 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 Color pickers??? It&amp;rsquo;s this menu, where we can select a color:
To my surprise we can install our own color pickers on the system, and add custom ones. There are quite a few of these, some are even open source, like this: GitHub - viktorstrate/color-picker-plus: An Improved Color Picker for macOS.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 16 - Screen Saver</title>
      <link>https://theevilbit.github.io/beyond/beyond_0016/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0016/</guid>
      <description>This is part 16 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 Screen savers have been detailed recently by Leo Pitton his blog post: &amp;ldquo;Saving Your Access&amp;rdquo;. Considering that he already wrote most of the interesting stuff, I will try to show some new information, but there will be some overlap.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 15 - xsanctl</title>
      <link>https://theevilbit.github.io/beyond/beyond_0015/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0015/</guid>
      <description>This is part 15 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 I run into this not so exciting persistent method when I was investigating xsanctl for&amp;hellip; other&amp;hellip; reasons&amp;hellip; xsanctl is a &amp;ldquo;Xsan file system control utility&amp;rdquo;, which allows us to mount and manage Xsans.
The xsanctl binary can be found at /System/Library/Filesystems/acfs.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 14 - atrun</title>
      <link>https://theevilbit.github.io/beyond/beyond_0014/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0014/</guid>
      <description>This is part 14 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 The at command set is a heritage *nix job scheduler on macOS. Although it&amp;rsquo;s slowly being deprecated, it&amp;rsquo;s still available on Big Sur, although disabled by default.
Enabling atrun As described by atrun&amp;rsquo;s man page, the scheduler can be enabled using the following command:</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 13 - Audio Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0013/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0013/</guid>
      <description>This is part 13 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This is another one of my favorites for some reason. macOS being a popular audio editing device, supports external audio drivers and plugins. @xorrior wrote a very extensive blog post about these at his website, here: Audio Unit Plug-ins. Legitimate Un-signed Code Execution | by Christopher Ross | Posts By SpecterOps Team Members</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 12 - QuickLook Plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0012/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0012/</guid>
      <description>This is part 12 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 TL;DR This technique is very similarly to Spotlight Importers, but heavily sandboxed. Itâ€™s even more limited as the user need to specifically want to preview the file.
Intro This will be a short post and it goes hand in hand with my previous one that detailed the use of Spotlight Importers for persistence.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 11 - Spotlight Importers</title>
      <link>https://theevilbit.github.io/beyond/beyond_0011/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0011/</guid>
      <description>This is part 11 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 TL;DR It works, but very limited due to heavy sandboxing, you can only read and copy files to your sandbox folder or consume some CPU power. If you have a way to escape sandbox then go for it, or could be used as part of a multi-part malware.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 10 - Application script files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0010/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0010/</guid>
      <description>This is part 10 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 I started to explore to possibility of persisting on macOS through script files contained in an application. The basic idea is that if we find a script file, which is being executed by a given application, we can edit that script file, put our code inside, and wait for an execution.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 9 - Preference Pane</title>
      <link>https://theevilbit.github.io/beyond/beyond_0009/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0009/</guid>
      <description>This is part 9 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 Preference panes on macOS are plugins to the System Preferences.app. These panes can extend the functionality of the app, and typically allow you to modify configuration settings for your app. These admins are loaded when the user selects them, so they are not perfect from persistence point of view, as it requires user interaction, but can still be a thing.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 8 - Hammerspoon</title>
      <link>https://theevilbit.github.io/beyond/beyond_0008/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0008/</guid>
      <description>This is part 8 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This idea came from my colleague @dejandayoff. It&amp;rsquo;s another application specific persistence option, related to Hammerspoon. The app is an automation tool, that allows macOS scripting through LUA scripting language. We can even embed full AppleScript code as well as run shell scripts.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 7 - xbar plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0007/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0007/</guid>
      <description>This is part 7 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 This technique came from @bradleyjkemp in one of his Twitter posts.
xbar is an application that can put the output of a script into the menubar. The scripts should be placed in ~/Library/Application\ Support/xbar/plugins/. Standard shell scripts are supported, and so I tried the one listed on their GitHub page as an example.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 6 - SSHRC</title>
      <link>https://theevilbit.github.io/beyond/beyond_0006/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0006/</guid>
      <description>This is part 6 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 I learned about this trick from @0xdade when he posted it on Twitter.
If we create a file in the user&amp;rsquo;s HOME directory at ~/.ssh/rc it will be executed prior to the user&amp;rsquo;s login shell becomes available. The man page of sshd describes this in more detail.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 5 - Pluggable Authentication Modules (PAM)</title>
      <link>https://theevilbit.github.io/beyond/beyond_0005/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0005/</guid>
      <description>This is part 5 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 PAM originated from Red Hat Linux, but made its way to most *nix based system, including macOS. It&amp;rsquo;s a modular system, that allows third party additions to various authentication related operations. I highly recommend checking out the FreeBSD documentation to get a full picture.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 4 - cron jobs</title>
      <link>https://theevilbit.github.io/beyond/beyond_0004/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0004/</guid>
      <description>This is part 4 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 cron is probably one of the most well known persistence mechanisms for macOS and basically any *nix operating system. It was originally developed for Unix back in 1975, and made its way to most platforms, which has Unix origins, like Linux, FreeBSD and thus macOS.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 3 - Login Items</title>
      <link>https://theevilbit.github.io/beyond/beyond_0003/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0003/</guid>
      <description>This is part 3 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 To clear up some expectations. The below tweet is not about this method, that is deferred for now. :)
Login items are probably one of the most well documented methods to persist on macOS. It&amp;rsquo;s widely used by various application to launch themselves upon user login.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 2 - iTerm2 startup</title>
      <link>https://theevilbit.github.io/beyond/beyond_0002/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0002/</guid>
      <description>This is part 2 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 If the first part was about Terminal and shell profiles, it&amp;rsquo;s worth to mention iTerm2, which is a popular Terminal alternative on macOS. It&amp;rsquo;s being used by many people, especially power users.
When we start iTerm2 it starts the same shell environment as Terminal, and thus the same startup files apply here as well.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 1 - shell startup files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0001/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0001/</guid>
      <description>This is part 1 in the series of &amp;ldquo;Beyond the good ol&#39; LaunchAgents&amp;rdquo;, where I try to collect various persistence techniques for macOS. For more background check the introduction.
 Shell startup files are executed when our shell environment like zsh or bash is starting up. macOS defaults to /bin/zsh these days, and whenever we open Terminal or SSH into the device, this is the shell environment we are placed into.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - Introduction</title>
      <link>https://theevilbit.github.io/beyond/beyond_intro/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_intro/</guid>
      <description>I was always amazed by @Hexacorn&amp;rsquo;s Beyond good ol&#39; Run key blog post series, which collects various persistence methods on Windows. It&amp;rsquo;s an awesome series, which has 133 parts at the time of this writing. I find them pretty cool, and if you are doing either offensive or defensive work on Windows, this is a must read and follow blog.
In the past years as my interest in macOS grew, and now that I&amp;rsquo;m mostly doing only macOS related research and studies I started to came across many - many tricks, which allows someone to do persistence on macOS beyond just the LaunchDaemons or LaunchAgents directories, which is used to store the launchd startup files.</description>
    </item>
    
  </channel>
</rss>
