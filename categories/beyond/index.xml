<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beyond on theevilbit blog</title>
    <link>https://theevilbit.github.io/categories/beyond/</link>
    <description>Recent content in beyond on theevilbit blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 25 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://theevilbit.github.io/categories/beyond/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 9 - Preference Pane</title>
      <link>https://theevilbit.github.io/beyond/beyond_0009/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0009/</guid>
      <description>Preference panes on macOS are plugins to the System Preferences.app. These panes can extend the functionality of the app, and typically allow you to modify configuration settings for your app. These admins are loaded when the user selects them, so they are not perfect from persistence point of view, as it requires user interaction, but can still be a thing.
Preference panes are located in:
 /System/Library/PreferencePanes - This folder contains the default macOS panes /Library/PreferencePanes - Here we fine the panes that are installed for all users.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 6 - SSHRC</title>
      <link>https://theevilbit.github.io/beyond/beyond_0006/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0006/</guid>
      <description>I learned about this trick from @0xdade when he posted it on Twitter.
If we create a file in the user&amp;rsquo;s HOME directory at ~/.ssh/rc it will be executed prior to the user&amp;rsquo;s login shell becomes available. The man page of sshd describes this in more detail.
 If ~/.ssh/rc exists and the sshd_config(5) PermitUserRC option is set, runs it; else if /etc/ssh/sshrc exists, runs it; otherwise runs xauth. The ``rc&#39;&#39; files are given the X11 authenti-cation protocol and cookie in standard input.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 7 - xbar plugins</title>
      <link>https://theevilbit.github.io/beyond/beyond_0007/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0007/</guid>
      <description>This technique came from @bradleyjkemp in one of his Twitter posts.
xbar is an application that can put the output of a script into the menubar. The scripts should be placed in ~/Library/Application\ Support/xbar/plugins/. Standard shell scripts are supported, and so I tried the one listed on their GitHub page as an example.
#!/bin/bash # the current date and time date # the current username echo $USER # the current user id id -u I created a script called script.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 8 - Hammerspoon</title>
      <link>https://theevilbit.github.io/beyond/beyond_0008/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0008/</guid>
      <description>This idea came from my colleague @dejandayoff. It&amp;rsquo;s another application specific persistence option, related to Hammerspoon. The app is an automation tool, that allows macOS scripting through LUA scripting language. We can even embed full AppleScript code as well as run shell scripts.
The app looks for a single file, ~/.hammerspoon/init.lua, and when started the script will be executed. They have plenty of examples on their Getting Started page, and an extensive API documentation.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 5 - Pluggable Authentication Modules (PAM)</title>
      <link>https://theevilbit.github.io/beyond/beyond_0005/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0005/</guid>
      <description>PAM originated from Red Hat Linux, but made its way to most *nix based system, including macOS. It&amp;rsquo;s a modular system, that allows third party additions to various authentication related operations. I highly recommend checking out the FreeBSD documentation to get a full picture.
PAM has four facilities concerning authentication, auth, account, session and password. These are related to authentication, account management, session management and password management respectively. I will focus here on auth which is responsible for user authentication.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 4 - cron jobs</title>
      <link>https://theevilbit.github.io/beyond/beyond_0004/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0004/</guid>
      <description>cron is probably one of the most well known persistence mechanisms for macOS and basically any *nix operating system. It was originally developed for Unix back in 1975, and made its way to most platforms, which has Unix origins, like Linux, FreeBSD and thus macOS.
We can use the crontab utility to manage our cron jobs. The -l option will list our currently scheduled jobs.
csaby@mac ~ % crontab -l * * * * * /bin/bash -c &amp;quot;touch /tmp/cron2&amp;quot; The output above show that we have a bash script to run every minute.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 3 - Login Items</title>
      <link>https://theevilbit.github.io/beyond/beyond_0003/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0003/</guid>
      <description>To clear up some expectations. The below tweet is not about this method, that is deferred for now. :)
Login items are probably one of the most well documented methods to persist on macOS. It&amp;rsquo;s widely used by various application to launch themselves upon user login. These applications show up in the menubar most of the time.
There are two ways of setting up Login Items.
Launch Services Framework The first method is using the Launch Services Framework, to which the API reference can be found here.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 2 - iTerm2 startup</title>
      <link>https://theevilbit.github.io/beyond/beyond_0002/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0002/</guid>
      <description>If the first part was about Terminal and shell profiles, it&amp;rsquo;s worth to mention iTerm2, which is a popular Terminal alternative on macOS. It&amp;rsquo;s being used by many people, especially power users.
When we start iTerm2 it starts the same shell environment as Terminal, and thus the same startup files apply here as well. However this application has an additional way to execute code.
In the Profile settings, there is an option, which is Send text at start.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - 1 - shell startup files</title>
      <link>https://theevilbit.github.io/beyond/beyond_0001/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_0001/</guid>
      <description>Shell startup files are executed when our shell environment like zsh or bash is starting up. macOS defaults to /bin/zsh these days, and whenever we open Terminal or SSH into the device, this is the shell environment we are placed into. bash and sh are still available, however they have to be specifically started.
When we start zsh it checks number of files, and if there is an environment variable or command inside, it will be set or executed.</description>
    </item>
    
    <item>
      <title>Beyond the good ol&#39; LaunchAgents - Introduction</title>
      <link>https://theevilbit.github.io/beyond/beyond_intro/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theevilbit.github.io/beyond/beyond_intro/</guid>
      <description>I was always amazed by @Hexacorn&amp;rsquo;s Beyond good ol&#39; Run key blog post series, which collects various persistence methods on Windows. It&amp;rsquo;s an awesome series, which has 133 parts at the time of this writing. I find them pretty cool, and if you are doing either offensive or defensive work on Windows, this is a must read and follow blog.
In the past years as my interest in macOS grew, and now that I&amp;rsquo;m mostly doing only macOS related research and studies I started to came across many - many tricks, which allows someone to do persistence on macOS beyond just the LaunchDaemons or LaunchAgents directories, which is used to store the launchd startup files.</description>
    </item>
    
  </channel>
</rss>
